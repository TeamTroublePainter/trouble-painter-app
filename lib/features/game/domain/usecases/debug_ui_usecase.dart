import 'dart:async';
import 'dart:convert';

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:x_pr/core/domain/usecases/base_usecase.dart';
import 'package:x_pr/core/theme/res/palette.dart';
import 'package:x_pr/core/utils/time/network_time_ext.dart';
import 'package:x_pr/features/config/domain/entities/config.dart';
import 'package:x_pr/features/config/domain/services/config_service.dart';
import 'package:x_pr/features/game/domain/entities/drawing/sketch.dart';
import 'package:x_pr/features/game/domain/entities/game_state/game_state.dart';
import 'package:x_pr/features/game/domain/entities/game_step.dart';
import 'package:x_pr/features/game/domain/entities/game_user.dart';

class DebugUiUsecase implements BaseUsecase<GameStep, GameState> {
  static final $ = AutoDisposeProvider<DebugUiUsecase>((ref) {
    return DebugUiUsecase(
      getConfig: () => ref.read(ConfigService.$),
    );
  });

  DebugUiUsecase({
    required Config Function() getConfig,
  }) : _getConfig = getConfig;

  final Config Function() _getConfig;
  Config get _config => _getConfig();
  bool get _isKo => _config.language.isKorean;
  String get _category => _isKo ? "장소" : "Transportation";
  String get _keyword => _isKo ? "도시" : "Motocycle";
  final int _myTurn = 0;
  final String _dummyRoomId = "ABCDFE";
  late final List<List<GameUser>> _voteResult = List.generate(
    dummyUserList.length,
    (i) => switch (i) {
      0 =>
        dummyUserList.where((user) => user != dummyUserList[_myTurn]).toList(),
      _ => [],
    },
  );

  static const bool _isMafia = true;
  static const bool _isQuickStartGame = true;

  List<Sketch> get _dummySketchList => jsonDecode(
        _isKo
            ? '[{"userId":1,"strokeList":[{"x":[53.0,52.0,53.0,53.0,54.0,55.0,57.0,61.0,75.0,94.0,107.0,111.0,112.0,115.0,120.0,127.0,130.0,130.0,129.0,128.0,128.0],"y":[343.0,332.0,302.0,245.0,229.0,223.0,220.0,219.0,215.0,207.0,203.0,202.0,202.0,208.0,222.0,241.0,263.0,289.0,315.0,330.0,336.0],"t":[7892.0,51.0,47.0,46.0,52.0,48.0,52.0,48.0,48.0,53.0,48.0,49.0,52.0,49.0,50.0,49.0,48.0,49.0,48.0,51.0,71.0]}],"canvasSize":{"w":335.0,"h":425.0},"color":"ffffd536"},{"userId":2,"strokeList":[{"x":[210.0,210.0,213.0,212.0,210.0,199.0,192.0,189.0,189.0,190.0,190.0,193.0,233.0,286.0,305.0,307.0,303.0,303.0,308.0,315.0,317.0,320.0,320.0,321.0,321.0,322.0,323.0,324.0,324.0,325.0,329.0,331.0,331.0],"y":[493.0,430.0,360.0,339.0,333.0,297.0,244.0,212.0,145.0,134.0,128.0,128.0,126.0,120.0,118.0,118.0,157.0,224.0,306.0,363.0,382.0,397.0,399.0,405.0,414.0,430.0,443.0,446.0,447.0,455.0,472.0,485.0,486.0],"t":[3464.0,57.0,34.0,48.0,32.0,62.0,49.0,32.0,38.0,32.0,44.0,59.0,48.0,51.0,35.0,73.0,63.0,32.0,52.0,51.0,42.0,33.0,41.0,38.0,35.0,37.0,42.0,46.0,51.0,49.0,37.0,49.0,88.0]}],"canvasSize":{"w":390.0,"h":617.0},"color":"ffff5d47"},{"userId":205,"strokeList":[{"x":[78.0,81.0,78.0,76.0,76.0,119.0,124.0,146.0,149.0,152.0,154.0,156.0,158.0,158.0,159.0,159.0,160.0],"y":[213.0,207.0,193.0,187.0,182.0,182.0,183.0,183.0,187.0,192.0,205.0,217.0,239.0,265.0,271.0,312.0,315.0],"t":[9765.0,34.0,48.0,34.0,48.0,33.0,32.0,34.0,48.0,33.0,49.0,33.0,32.0,47.0,33.0,35.0,32.0]}],"canvasSize":{"w":335.0,"h":425.0},"color":"ffffd536"},{"userId":3,"strokeList":[{"x":[257.0,254.0,249.0,247.0,247.0,254.0,264.0,271.0,276.0,278.0,281.0,281.0,283.0,285.0,286.0,287.0,287.0,281.0,264.0,255.0,254.0],"y":[487.0,475.0,448.0,433.0,432.0,433.0,433.0,432.0,431.0,430.0,430.0,431.0,441.0,462.0,473.0,474.0,478.0,478.0,481.0,482.0,483.0],"t":[6172.0,54.0,44.0,49.0,139.0,49.0,35.0,45.0,37.0,32.0,40.0,32.0,49.0,45.0,38.0,46.0,218.0,52.0,48.0,46.0,52.0]}],"canvasSize":{"w":390.0,"h":617.0},"color":"ffff5d47"}]'
            : '[{"userId":1,"strokeList":[{"x":[143.0, 142.0, 138.0, 133.0, 127.0, 124.0, 122.0, 122.0, 123.0, 125.0, 137.0, 142.0, 145.0, 149.0, 158.0, 161.0, 177.0, 176.0, 174.0, 165.0, 140.0, 137.0, 136.0, 136.0, 134.0, 132.0, 130.0, 129.0, 128.0, 128.0, 127.0, 127.0, 126.0, 123.0, 119.0, 117.0, 110.0, 107.0, 103.0, 94.0, 91.0, 86.0, 80.0, 72.0, 69.0, 67.0, 67.0, 66.0, 67.0, 68.0, 74.0, 75.0, 78.0, 81.0, 82.0, 86.0, 89.0, 93.0, 101.0, 105.0, 113.0, 122.0, 119.0, 112.0, 106.0, 104.0, 102.0, 101.0, 101.0, 107.0, 125.0, 135.0, 138.0, 140.0, 140.0, 134.0, 129.0, 121.0, 117.0, 112.0, 106.0, 102.0, 102.0, 103.0, 114.0, 125.0, 128.0, 130.0, 130.0, 127.0, 122.0, 114.0, 113.0, 110.0, 108.0, 108.0, 115.0, 120.0, 128.0, 134.0, 135.0, 124.0, 112.0, 108.0, 103.0, 102.0, 103.0, 118.0, 123.0, 131.0, 135.0, 137.0, 137.0, 132.0, 126.0, 122.0, 116.0, 111.0, 109.0, 108.0, 110.0, 114.0, 123.0, 132.0, 139.0, 140.0, 141.0, 139.0, 135.0, 130.0, 129.0, 129.0, 128.0, 145.0, 151.0, 161.0, 170.0, 174.0, 179.0, 189.0, 199.0, 205.0, 210.0, 219.0, 229.0, 233.0, 238.0, 245.0, 248.0, 250.0, 251.0, 252.0, 253.0, 252.0, 247.0, 244.0, 242.0, 243.0, 251.0, 256.0, 260.0, 261.0, 258.0, 254.0, 249.0, 246.0, 244.0, 244.0, 247.0, 250.0, 260.0, 266.0, 268.0, 268.0, 255.0, 244.0, 236.0, 235.0, 235.0, 242.0, 248.0, 253.0, 256.0, 257.0, 257.0, 256.0, 255.0, 253.0, 250.0, 247.0, 247.0, 246.0, 246.0, 245.0, 244.0, 242.0, 239.0, 234.0, 224.0, 218.0, 218.0, 224.0, 234.0, 244.0, 245.0, 249.0, 253.0, 256.0, 256.0, 254.0, 248.0, 238.0, 239.0, 242.0, 245.0, 246.0, 246.0, 244.0, 239.0, 230.0, 222.0, 212.0, 204.0, 196.0, 188.0, 178.0, 172.0, 160.0, 156.0, 155.0, 154.0, 153.0, 153.0, 152.0, 152.0, 151.0, 151.0, 150.0, 150.0, 149.0, 148.0, 146.0, 144.0, 142.0, 139.0, 136.0, 132.0, 130.0, 129.0], "y": [138.0, 138.0, 139.0, 142.0, 150.0, 158.0, 164.0, 168.0, 173.0, 176.0, 182.0, 184.0, 184.0, 185.0, 185.0, 186.0, 186.0, 186.0, 187.0, 188.0, 188.0, 187.0, 187.0, 186.0, 184.0, 183.0, 180.0, 179.0, 179.0, 178.0, 177.0, 176.0, 177.0, 183.0, 190.0, 195.0, 209.0, 216.0, 223.0, 240.0, 247.0, 256.0, 265.0, 279.0, 285.0, 288.0, 289.0, 290.0, 290.0, 291.0, 294.0, 295.0, 295.0, 297.0, 297.0, 299.0, 300.0, 300.0, 302.0, 302.0, 303.0, 303.0, 302.0, 300.0, 301.0, 305.0, 310.0, 316.0, 318.0, 320.0, 321.0, 315.0, 312.0, 308.0, 301.0, 293.0, 290.0, 288.0, 288.0, 294.0, 306.0, 321.0, 331.0, 338.0, 342.0, 340.0, 336.0, 329.0, 318.0, 313.0, 311.0, 309.0, 309.0, 311.0, 320.0, 329.0, 337.0, 337.0, 336.0, 324.0, 310.0, 300.0, 299.0, 300.0, 313.0, 329.0, 333.0, 340.0, 340.0, 338.0, 333.0, 322.0, 312.0, 306.0, 304.0, 303.0, 305.0, 310.0, 316.0, 323.0, 331.0, 334.0, 335.0, 335.0, 327.0, 320.0, 308.0, 299.0, 295.0, 294.0, 294.0, 296.0, 296.0, 296.0, 295.0, 293.0, 289.0, 286.0, 284.0, 281.0, 279.0, 277.0, 276.0, 273.0, 271.0, 271.0, 269.0, 267.0, 266.0, 265.0, 264.0, 264.0, 263.0, 263.0, 269.0, 275.0, 286.0, 299.0, 302.0, 299.0, 289.0, 269.0, 262.0, 259.0, 259.0, 260.0, 267.0, 277.0, 285.0, 289.0, 287.0, 278.0, 269.0, 262.0, 254.0, 254.0, 259.0, 270.0, 281.0, 289.0, 288.0, 281.0, 274.0, 269.0, 263.0, 262.0, 260.0, 255.0, 243.0, 226.0, 221.0, 214.0, 206.0, 206.0, 205.0, 205.0, 203.0, 201.0, 195.0, 192.0, 191.0, 190.0, 189.0, 189.0, 188.0, 188.0, 190.0, 193.0, 197.0, 198.0, 199.0, 199.0, 199.0, 212.0, 223.0, 224.0, 227.0, 228.0, 230.0, 232.0, 234.0, 235.0, 238.0, 240.0, 241.0, 242.0, 243.0, 243.0, 245.0, 245.0, 244.0, 242.0, 240.0, 239.0, 236.0, 234.0, 229.0, 222.0, 207.0, 203.0, 200.0, 196.0, 194.0, 191.0, 189.0, 185.0, 181.0, 181.0, 182.0], "t": [1363.0, 45.0, 43.0, 38.0, 26.0, 34.0, 33.0, 31.0, 33.0, 33.0, 32.0, 41.0, 25.0, 22.0, 33.0, 19.0, 22.0, 64.0, 32.0, 31.0, 33.0, 36.0, 17.0, 29.0, 32.0, 34.0, 24.0, 31.0, 16.0, 27.0, 33.0, 31.0, 260.0, 29.0, 31.0, 17.0, 31.0, 18.0, 31.0, 40.0, 18.0, 22.0, 33.0, 28.0, 32.0, 18.0, 32.0, 16.0, 202.0, 39.0, 44.0, 32.0, 32.0, 30.0, 18.0, 18.0, 16.0, 32.0, 38.0, 17.0, 42.0, 496.0, 45.0, 44.0, 35.0, 17.0, 35.0, 28.0, 28.0, 34.0, 34.0, 31.0, 17.0, 25.0, 27.0, 17.0, 18.0, 30.0, 17.0, 28.0, 18.0, 29.0, 18.0, 34.0, 31.0, 39.0, 16.0, 30.0, 31.0, 20.0, 29.0, 33.0, 17.0, 23.0, 33.0, 24.0, 37.0, 18.0, 28.0, 36.0, 29.0, 33.0, 41.0, 26.0, 37.0, 40.0, 21.0, 34.0, 17.0, 28.0, 18.0, 33.0, 32.0, 22.0, 32.0, 26.0, 33.0, 20.0, 28.0, 19.0, 32.0, 17.0, 23.0, 25.0, 36.0, 18.0, 27.0, 19.0, 33.0, 47.0, 24.0, 32.0, 32.0, 23.0, 17.0, 40.0, 39.0, 18.0, 21.0, 41.0, 38.0, 15.0, 32.0, 34.0, 39.0, 18.0, 24.0, 38.0, 32.0, 42.0, 21.0, 37.0, 28.0, 64.0, 36.0, 18.0, 28.0, 35.0, 42.0, 41.0, 23.0, 40.0, 23.0, 28.0, 31.0, 35.0, 32.0, 33.0, 34.0, 22.0, 39.0, 37.0, 19.0, 28.0, 34.0, 24.0, 40.0, 32.0, 23.0, 40.0, 37.0, 18.0, 30.0, 17.0, 33.0, 25.0, 22.0, 27.0, 34.0, 34.0, 18.0, 30.0, 31.0, 18.0, 26.0, 21.0, 29.0, 18.0, 17.0, 33.0, 36.0, 20.0, 28.0, 34.0, 17.0, 40.0, 36.0, 33.0, 21.0, 28.0, 35.0, 109.0, 69.0, 40.0, 41.0, 23.0, 18.0, 28.0, 33.0, 34.0, 23.0, 25.0, 22.0, 28.0, 19.0, 43.0, 21.0, 34.0, 26.0, 21.0, 32.0, 42.0, 21.0, 17.0, 24.0, 34.0, 27.0, 36.0, 24.0, 39.0, 34.0, 27.0, 34.0, 33.0, 33.0, 32.0, 25.0, 26.0, 22.0]}],"canvasSize":{"w":335.0,"h":425.0},"color":"ffffd536"}, {"userId":2,"strokeList":[{"x": [215.0, 212.0, 202.0, 197.0, 194.0, 192.0, 189.0, 188.0, 187.0, 187.0, 192.0, 204.0, 221.0, 240.0, 259.0, 286.0, 295.0, 305.0, 317.0, 321.0, 328.0, 331.0, 334.0, 339.0, 342.0, 343.0, 343.0, 342.0, 340.0, 334.0, 327.0, 320.0, 307.0, 297.0, 281.0, 277.0, 267.0, 260.0, 256.0, 251.0, 244.0, 236.0, 231.0, 224.0, 222.0, 220.0, 213.0, 208.0, 200.0, 197.0, 195.0, 192.0, 191.0, 191.0, 190.0, 190.0, 196.0, 205.0, 213.0, 218.0, 223.0, 225.0, 226.0, 228.0, 229.0, 229.0, 230.0, 229.0, 226.0, 222.0, 220.0, 217.0, 212.0, 212.0, 221.0, 232.0, 237.0, 239.0, 240.0, 238.0, 230.0, 224.0, 219.0, 225.0, 235.0, 258.0, 265.0, 273.0, 284.0, 286.0, 290.0, 294.0, 297.0, 302.0, 302.0, 298.0, 295.0, 289.0, 286.0, 286.0, 287.0, 290.0, 292.0, 296.0, 302.0, 306.0, 305.0, 301.0, 290.0, 287.0, 286.0], "y": [60.0, 65.0, 82.0, 92.0, 97.0, 103.0, 109.0, 115.0, 116.0, 117.0, 117.0, 118.0, 121.0, 123.0, 126.0, 131.0, 133.0, 136.0, 138.0, 139.0, 139.0, 137.0, 123.0, 100.0, 78.0, 69.0, 64.0, 63.0, 63.0, 62.0, 61.0, 61.0, 60.0, 59.0, 57.0, 56.0, 53.0, 50.0, 48.0, 47.0, 45.0, 42.0, 40.0, 40.0, 41.0, 43.0, 57.0, 66.0, 79.0, 86.0, 89.0, 95.0, 95.0, 104.0, 106.0, 110.0, 112.0, 114.0, 116.0, 117.0, 119.0, 119.0, 120.0, 120.0, 119.0, 118.0, 115.0, 111.0, 108.0, 107.0, 108.0, 112.0, 122.0, 135.0, 148.0, 151.0, 149.0, 143.0, 134.0, 125.0, 116.0, 114.0, 114.0, 114.0, 113.0, 112.0, 113.0, 115.0, 117.0, 118.0, 119.0, 119.0, 120.0, 120.0, 121.0, 120.0, 120.0, 121.0, 128.0, 136.0, 141.0, 145.0, 146.0, 146.0, 138.0, 126.0, 120.0, 117.0, 117.0, 119.0, 120.0], "t": [4834.0, 36.0, 31.0, 38.0, 32.0, 40.0, 38.0, 34.0, 59.0, 38.0, 33.0, 22.0, 27.0, 20.0, 29.0, 33.0, 17.0, 31.0, 34.0, 22.0, 39.0, 38.0, 31.0, 34.0, 32.0, 40.0, 25.0, 22.0, 27.0, 36.0, 31.0, 32.0, 33.0, 24.0, 22.0, 17.0, 40.0, 22.0, 16.0, 17.0, 30.0, 34.0, 32.0, 16.0, 30.0, 34.0, 32.0, 31.0, 41.0, 38.0, 18.0, 25.0, 24.0, 38.0, 32.0, 40.0, 41.0, 40.0, 31.0, 23.0, 39.0, 37.0, 32.0, 23.0, 31.0, 17.0, 26.0, 22.0, 27.0, 18.0, 15.0, 18.0, 31.0, 32.0, 40.0, 40.0, 24.0, 27.0, 21.0, 29.0, 34.0, 32.0, 22.0, 82.0, 30.0, 42.0, 22.0, 17.0, 38.0, 17.0, 26.0, 27.0, 21.0, 18.0, 59.0, 23.0, 17.0, 37.0, 39.0, 36.0, 18.0, 31.0, 17.0, 39.0, 32.0, 39.0, 36.0, 20.0, 33.0, 33.0, 34.0]}],"canvasSize":{"w":390.0,"h":617.0},"color":"ffff5d47"},{"userId":205,"strokeList":[{"x":[78.0,81.0,78.0,76.0,76.0,119.0,124.0,146.0,149.0,152.0,154.0,156.0,158.0,158.0,159.0,159.0,160.0],"y":[213.0,207.0,193.0,187.0,182.0,182.0,183.0,183.0,187.0,192.0,205.0,217.0,239.0,265.0,271.0,312.0,315.0],"t":[9765.0,34.0,48.0,34.0,48.0,33.0,32.0,34.0,48.0,33.0,49.0,33.0,32.0,47.0,33.0,35.0,32.0]}],"canvasSize":{"w":335.0,"h":425.0},"color":"ffffd536"},{"userId":3,"strokeList":[{"x":[257.0,254.0,249.0,247.0,247.0,254.0,264.0,271.0,276.0,278.0,281.0,281.0,283.0,285.0,286.0,287.0,287.0,281.0,264.0,255.0,254.0],"y":[487.0,475.0,448.0,433.0,432.0,433.0,433.0,432.0,431.0,430.0,430.0,431.0,441.0,462.0,473.0,474.0,478.0,478.0,481.0,482.0,483.0],"t":[6172.0,54.0,44.0,49.0,139.0,49.0,35.0,45.0,37.0,32.0,40.0,32.0,49.0,45.0,38.0,46.0,218.0,52.0,48.0,46.0,52.0]}],"canvasSize":{"w":390.0,"h":617.0},"color":"ffff5d47"}]',
      ).map<Sketch>((json) {
        return Sketch.fromJson(json);
      }).toList();

  List<GameUser> get dummyUserList => [
        GameUser(
          id: 1,
          nickname: _isKo ? '우주캡숑귀요미' : 'Nero',
          color: Palette.drawingRed,
          isConnect: true,
        ),
        GameUser(
          id: 2,
          nickname: _isKo ? '아보카도🥑' : 'AVOCA🥑',
          color: Palette.drawingOrange,
          isConnect: true,
        ),
        GameUser(
          id: 3,
          nickname: _isKo ? '피콜로' : 'Piccolo',
          color: Palette.drawingYellow,
          isConnect: true,
        ),
        GameUser(
          id: 4,
          nickname: _isKo ? '카카로트' : 'Kakarot',
          color: Palette.drawingLightGreen,
          isConnect: true,
        ),
        GameUser(
          id: 5,
          nickname: _isKo ? '고양이' : 'Cat',
          color: Palette.drawingGreen,
          isConnect: true,
        ),
        GameUser(
          id: 6,
          nickname: _isKo ? '뇸뇸이1' : 'Dog',
          color: Palette.drawingLightBlue,
          isConnect: true,
        ),
        GameUser(
          id: 7,
          nickname: _isKo ? '뇸뇸이2' : 'Cutest',
          color: Palette.drawingBlue,
          isConnect: true,
        ),
        GameUser(
          id: 8,
          nickname: _isKo ? '뇸뇸이3' : 'Angela',
          color: Palette.drawingPurple,
          isConnect: true,
        ),
        GameUser(
          id: 9,
          nickname: _isKo ? '뇸뇸이4' : 'Nell',
          color: Palette.drawingPink,
          isConnect: true,
        ),
        GameUser(
          id: 10,
          nickname: _isKo ? '뇸뇸이5' : 'Grid',
          color: Palette.drawingGray,
          isConnect: true,
        ),
      ];

  @override
  GameState call(GameStep step) {
    return switch (step) {
      GameStep.quickStartWaiting => GameQuickStartWaitingState(),
      GameStep.waiting => GameWaitingState(
          userList: dummyUserList,
          roomId: _dummyRoomId,
          myId: 1,
          hostIndex: 0,
          minPlayer: 3,
          maxPlayer: 10,
        ),
      GameStep.ready => GameReadyState(
          roomId: _dummyRoomId,
          showMyRoleMs: 7000,
          startedAt: NetworkTime.now,
          isMafia: _isMafia,
          category: _category,
          keyword: _keyword,
        ),
      GameStep.drawing => GameDrawingState(
          userList: dummyUserList,
          maxStroke: 1,
          strokesLeft: 1,
          initAnimMs: 3000,
          roundAnimMs: 1650,
          maxRound: 1,
          currentRound: 0,
          currentTurn: 0,
          currentTurnStartedAt:
              NetworkTime.now.subtract(const Duration(seconds: 0)),
          category: _category,
          keyword: _keyword,
          currentSketch: Sketch.empty(),
          sketchList: [],
          reaction$Ctrl: StreamController(),
          isMafia: _isMafia,
          myTurn: _myTurn,
          stage: GameDrawingStage.round,
          turnMaxMs: 15000,
        ),
      GameStep.voting => GameVotingState(
          startedAt: NetworkTime.now,
          sketchList: _dummySketchList,
          voteResult: _voteResult,
          category: _category,
          keyword: _keyword,
          myTurn: _myTurn,
          myVoteIndex: -1,
          maxVotingMs: 10000,
          isMafia: false,
          userList: dummyUserList,
        ),
      GameStep.guess => GameGuessState(
          startedAt: NetworkTime.now,
          mafiaAnswer: "",
          sketchList: _dummySketchList,
          mafiaIndex: 0,
          category: _category,
          keyword: _keyword,
          isMafia: _isMafia,
          maxGuessMs: 30000,
          userList: dummyUserList,
        ),
      GameStep.result => GameResultState(
          mafiaAnswer: _keyword,
          sketchList: _dummySketchList,
          mafiaIndex: 0,
          isMafiaWin: _isMafia,
          isQuickStartGame: _isQuickStartGame,
          category: _category,
          keyword: _keyword,
          userList: dummyUserList,
          showResultMs: 15000,
          resultStartedAt: NetworkTime.now,
        ),
    };
  }
}
