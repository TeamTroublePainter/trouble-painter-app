plugins {
    id "com.android.application"
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def loadPropertiesFile(buildType) {
    def propertiesFile = rootProject.file("../lib/.env/aos/${buildType}-key.properties")
    def properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    properties.put("storeFile", "../../lib/.env/aos/${properties['storeFile']}")
    return properties
}

def uploadProperties = loadPropertiesFile("upload")

android {

    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions += "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationId "kr.co.devstory.xpr.dev"
            resValue "string", "app_name", "[DEV]Trouble Painter"
            resValue "string", "deep_link_scheme", "devtroublepainter"
        }
        prod {
            dimension "flavor-type"
            applicationId "kr.co.devstory.xpr"
            resValue "string", "app_name", "Trouble Painter"
            resValue "string", "deep_link_scheme", "troublepainter"
        }
    }

    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----

   namespace = "kr.co.devstory.xpr"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            keyAlias uploadProperties['keyAlias']
            keyPassword uploadProperties['keyPassword']
            storeFile file(uploadProperties['storeFile'])
            storePassword uploadProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId = "kr.co.devstory.xpr"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        debug {
            signingConfig = signingConfigs.debug
        }

        release {
            signingConfig = signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}
